dClass - Pattern Classification Engine

dClass is an indexed pattern classification engine. dClass is capable of
performing near constant time pattern classification. dClass can quickly and
accurately find the best matching pattern rule for a given input. For an input
of size M classified against an index of size N, dClass has worst case O(M)
performance, even for large values of N. To accomplish this, dClass uses a
dtree, a multi edge networked graph of sub pattern nodes. This structure is
heavily optimized for searching, retrieval, and high performance on modern day
CPUs (classification runtime is in the range of 10 microseconds on modern day
hardware).

dClass introduces several classification pattern types: STRONG, CHAIN, WEAK,
and NONE. These types can be coupled with regular expressions, absolute
positioning, grouping, inheritance, duplicates, ranking, and directional
proximity. This allows for an expressive index which is capable of handling
complex context aware patterns like language as well as simpler pattern
classifications like device detection, all under a unified syntax and API.

dClass is built in a modular fashion and allows for schema free data modeling.
This means that multiple pattern indexes can be combined with their own custom
classification language allowing for centralized domain specific classification
while retaining near constant time performance.


PATTERNS

dClass loads its patterns from a .dtree file or from a DDR xml directory.
Patterns can also be added directly to the index via the dtree C API. The test
client allows for the conversion of a DDR xml directory into a .dtree file and
an API exists to dump the current index into a .dtree file.

Please see the README in the dtree directory for detailed .dtree notes.


AUTHORS

Reza Naghibi (reza.naghibi@yahoo.com)

Special thanks:
OpenDDR team, Anthony Watson, Eric Honer, Joe Pearson, Luke Kolin,
Ivan Kozhuharov, Chris Hill, Chris McClellen, and The Weather Channel.


HOWTO

To compile the test client, run make in the src directory.

To build with varnish and nginx, please reference the READMEs in the varnish
and nginx servers subdirectories.

To integrate with the dClass API:

  -include the dClass header file:
    #include "dclass_client.h"

  -define a dclass_index:
    dclass_index dci;

  -populate the index using a dtree file or OpenDDR resource file:
    dclass_load_file(&dci,"/path/to/file.dtree");
    -OR-
    openddr_load_resources(&dci,"/path/to/openddr/resources");

  -classify a string against the index and get the resulting kv data:
    dclass_keyvalue *kv=dclass_classify(&dci,"this is a string");
    char *id=kv->id;
    char *field_xyz=dclass_get_kvalue(kv,"xyz");

  -freeing the index:
    dclass_free(&dci);


ROADMAP

Enhancements for 3.0

  -Realtime additions, modifications, and deletion
  -Expanded regex support
  -Make index directives the default


NOTES

All US-ASCII alphanumeric characters are pattern searchable. Non alphanumeric
pattern searchable characters are defined in DTREE_HASH_SCHARS. These chars
are word seperators. Indexed US-ASCII print characters (0x20 thru 0x7E) which
aren't pattern searchable are replaced with DTREE_PATTERN_ANY and can match on
any character. All pattern matching is US-ASCII case insensitive. Extended
non-seperator character set recognition is supported via DTREE_HASH_TCHARS.

Write operations on the index are not thread safe. Read operations are thread
safe (with at most one writer). Read operations have the dclass index parameter
designated with a 'const'.

Memory limits are tightly bounded. Default configuration allows for 65k search
nodes and 8mb of general memory. Adjusting DTREE_DT_PACKED* will allow for more
search nodes and increasing DTREE_M_MAX_SLABS will allow for more general use
memory. Since the dtree data structure is memory pointer heavy, pointers have
the option to be compressed down into 16bit or 32bit values.

